public Centralization quotationsCentralization(int userID){
	
	int abQuotationsScore = 0;
	int totalQuotationsScore = 0;
	int abNumerator, numerator, denominator;
	String type = new String();
	Centralization cent = new Centralization();

        try (Connection connection = dataSource.getConnection()) {
            String query1 = "SELECT ARTICLE_ID FROM ARTICLE_AUTHORS WHERE USER_ID = ?";
            PreparedStatement statement1 = connection.prepareStatement(query1);
            statement1.setString(1, userID);

            ResultSet resultSet1 = statement1.executeQuery();
            while(resultSet1.next()) {
                numerator = 0;
                denominator = 0;
                String articleID = resultSet1.getString("ARTICLE_ID");
                String query2 = "SELECT * FROM ARTICLE_AUTHORS WHERE ARTICLE_ID = ?";
                PreparedStatement statement2 = connection.prepareStatement(query2);
                statement2.setString(1, articleID);

                ResultSet resultSet2 = statement2.executeQuery();
                while(resultSet2.next()){
                    denominator++;
                }
                denominator = (1 > denominator - 2) ? 1 : denominator - 2;

                String query3 = "SELECT J.SCORE FROM JOURNALS J JOIN ARTICLES A ON A.JOURNAL_ISSN = J.ISSN JOIN QUOTATIONS Q ON Q.ARTICLE_ID = A.ARTICLE_ID WHERE Q.ARTICLE_ID = ?";
                PreparedStatement statement3 = connection.prepareStatement(query3);
                statement3.setString(1, articleID);

                ResultSet resultSet3 = statement3.executeQuery();
                while(resultSet3.next()){
                    numerator += resultSet3.getInt("SCORE");
                    if(resultSet3.getInt("SCORE")>=4)
                    	abNumerator+ = resultSet3.getInt("SCORE");
                }
                if(abNumerator!=0){
					abQuotationsScore+ = abNumerator / denominator;
				}
                totalQuotationsScore += numerator / denominator;
            }
            cent.setABScore(abQuotationsScore);
            cent.setTotalScore(totalQuotationsScore);
            String query1 = "SELECT T.TYPE FROM TEACHERS T JOIN USERS U ON T.EMAIL = U.EMAIL WHERE U.USER_ID = ?";
            PreparedStatement statement1 = connection.prepareStatement(query1);
            statement1.setString(1, userID);
            ResultSet resultSet1 = statement1.executeQuery();
            while(resultSet1.next()){
            	type = resultSet1.getString("TYPE");
            }
            //setam tipul actual
            cent.setActualType(type);

            if(type.startsWith("Lect")){
            	//criteriile pentru trecere la conferentiar
            	if(abQuotationsScore>=12 && totalQuotationsScore>=48){
            	    cent.setPass(true);
              		cent.setFutureType("Conferentiar");
            	}
            	else 
            		cent.setPass(false);
            }

            else{
            	if(type.startsWith("Conf")){
            		//criteriile pentru trecere la profesor
            		if(abQuotationsScore >= 40 && totalQuotationsScore >= 120){
            			cent.setPass(true);
            			cent.setFutureType("Profesor");
            		}
            		else
            			cent.setPass(false);
            	}
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return cent;
}